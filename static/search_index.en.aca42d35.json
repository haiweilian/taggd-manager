[{"id":0,"title":"Events","routePath":"/taggd-manager/guide/api/events","lang":"en","toc":[{"text":"Taggd Events","id":"taggd-events","depth":2,"charIndex":606},{"text":"Taggd.Tag Events","id":"taggdtag-events","depth":2,"charIndex":2850}],"domain":"","content":"#\n\nUsing the .on(), .once() and .off() methods you can subscribe and unsubscribe to\nevents.\n\n * All of above mentioned methods are available on Taggd and Tag instances.\n * To subscribe to an event for all tags, subscribe to that event on the Taggd\n   instance.\n\nFor example:\n\nconst image = document.getElementById('my-image');\nconst taggd = new Taggd(image);\n\n// Prevent adding tags\ntaggd.on('taggd.tag.add', (tag) => {\n  // Some events can be prevented by returning false (see tables below)\n  return false;\n});\n\n// This tag isnâ€™t added because of above event handler\ntaggd.add(new Taggd.Tag(..., ...));\n\n\n\nTaggd Events#\n\nThe table below lists all available tables for a Taggd instance.\n\nAll taggd.editor* event handlers receive the following arguments:\n\n 1. Taggd instance\n 2. [position] x/y/left/top\n\nAll taggd.tag* event handlers receive the following arguments:\n\n 1. Taggd instance\n 2. Tag instance\n\nEVENT                       TRIGGERED                            IS PREVENTABLE BY RETURNING FALSE\ntaggd.destroy               before destroying a Taggd instance   yes\ntaggd.editor.enable         before enable editor mode            yes\ntaggd.editor.disable        before disabling editor mode         yes\ntaggd.editor.load           before load image                    no\ntaggd.editor.loaded         after load image                     no\ntaggd.editor.loaderror      after error image                    no\ntaggd.editor.add            after click image(no move trigger)   no\ntaggd.editor.zoom           after zoom image                     no\ntaggd.editor.movedown       after movedown image                 no\ntaggd.editor.move           after move image                     no\ntaggd.editor.moveup         after moveup image                   no\ntaggd.tag.add               before adding a tag(move trigger)    yes\ntaggd.tag.added             after adding a tag                   no\ntaggd.tag.delete            before deleting a tag                yes\ntaggd.tag.deleted           after deleting a tag                 no\ntaggd.tag.show              before showing a tag                 yes\ntaggd.tag.shown             after showing a tag                  no\ntaggd.tag.hide              before hiding a tag                  yes\ntaggd.tag.hidden            after hiding a tag                   no\ntaggd.tag.change            before changing a tag                yes\ntaggd.tag.changed           after changing a tag                 no\ntaggd.tag.click             after click a tag(no move trigger)   no\ntaggd.tag.editor.enable     before enable editor mode            yes\ntaggd.tag.editor.disable    before disabling editor mode         yes\ntaggd.tag.editor.movedown   after movedown a tag                 no\ntaggd.tag.editor.move       after move a tag                     no\ntaggd.tag.editor.moveup     after moveup a tag(move trigger)     no\n\n\nTaggd.Tag Events#\n\nThe table below lists all available tables for a Tag instance.\n\nAll taggd.tag.* event handlers receive the following argument:\n\n 1. Tag instance\n\nEVENT                       TRIGGERED                            IS PREVENTABLE BY RETURNING FALSE\ntaggd.tag.delete            before deleting a tag                yes\ntaggd.tag.deleted           after deleting a tag                 no\ntaggd.tag.show              before showing a tag                 yes\ntaggd.tag.shown             after showing a tag                  no\ntaggd.tag.hide              before hiding a tag                  yes\ntaggd.tag.hidden            after hiding a tag                   no\ntaggd.tag.change            before changing a tag                yes\ntaggd.tag.changed           after changing a tag                 no\ntaggd.tag.click             after click a tag(no move trigger)   no\ntaggd.tag.editor.enable     before enable editor mode            yes\ntaggd.tag.editor.disable    before disabling editor mode         yes\ntaggd.tag.editor.movedown   after movedown a tag                 no\ntaggd.tag.editor.move       after move a tag                     no\ntaggd.tag.editor.moveup     after moveup a tag(move trigger)     no","frontmatter":{},"version":""},{"id":1,"title":"Options","routePath":"/taggd-manager/guide/api/options","lang":"en","toc":[],"domain":"","content":"#\n\nThe options parameter is an object of options.\n\noptions = {\n  // The event to show the tag\n  show: 'mouseenter',\n  // The event to hide the tag\n  hide: 'mouseleave',\n  // The event triggers the add tag\n  addEvent: 'dblclick',\n  // The zoom ratio\n  zoomRatio: 0.1,\n  // The min zoom ratio\n  zoomRatioMin: 0.01,\n  // The max zoom ratio\n  zoomRatioMax: 100,\n  // The duration before the tag popup is actually hidden.\n  // If there is spacing between the tag button and popup, and you use mouseover/mouseout to toggle visiblity, you probably want to keep this.\n  hideDelay: 500,\n};\n\nnew Taggd(image, options);\n","frontmatter":{},"version":""},{"id":2,"title":"Taggd","routePath":"/taggd-manager/guide/api/taggd","lang":"en","toc":[{"text":"new Taggd(image, [options], [data])","id":"new-taggdimage-options-data","depth":3,"charIndex":3},{"text":"taggd.on(eventName, handler)","id":"taggdoneventname-handler","depth":3,"charIndex":238},{"text":"taggd.off(eventName, handler)","id":"taggdoffeventname-handler","depth":3,"charIndex":476},{"text":"taggd.once(eventName, handler)","id":"taggdonceeventname-handler","depth":3,"charIndex":735},{"text":"taggd.setOptions(options)","id":"taggdsetoptionsoptions","depth":3,"charIndex":975},{"text":"taggd.addTag(tag)","id":"taggdaddtagtag","depth":3,"charIndex":1147},{"text":"taggd.getTag(index)","id":"taggdgettagindex","depth":3,"charIndex":1309},{"text":"taggd.deleteTag(index)","id":"taggddeletetagindex","depth":3,"charIndex":1477},{"text":"taggd.setTags(tags)","id":"taggdsettagstags","depth":3,"charIndex":1652},{"text":"taggd.addTags(tags)","id":"taggdaddtagstags","depth":3,"charIndex":1812},{"text":"taggd.getTags()","id":"taggdgettags","depth":3,"charIndex":1972},{"text":"taggd.deleteTags()","id":"taggddeletetags","depth":3,"charIndex":2074},{"text":"taggd.map(callback)","id":"taggdmapcallback","depth":3,"charIndex":2169},{"text":"taggd.destroy()","id":"taggddestroy","depth":3,"charIndex":2359},{"text":"taggd.enableEditorMode()","id":"taggdenableeditormode","depth":3,"charIndex":2451},{"text":"taggd.disableEditorMode()","id":"taggddisableeditormode","depth":3,"charIndex":2552}],"domain":"","content":"#\n\n\nnew Taggd(image, [options], [data])#\n\nPARAM       TYPE          DEFAULT   DESCRIPTION\nimage       HTMLElement             The image to wrap\n[options]   Object        {}        The options\n[data]      Array         []        The tags\n\n\ntaggd.on(eventName, handler)#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\nPARAM       TYPE       DESCRIPTION\neventName   String     The event to subscribe to.\nhandler     function   The handler to execute.\n\n\ntaggd.off(eventName, handler)#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\nPARAM       TYPE       DESCRIPTION\neventName   String     The event to unsubscribe from.\nhandler     function   The handler that was used to subscribe.\n\n\ntaggd.once(eventName, handler)#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\nPARAM       TYPE       DESCRIPTION\neventName   String     The event to subscribe to.\nhandler     function   The handler to execute.\n\n\ntaggd.setOptions(options)#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\nPARAM     TYPE     DESCRIPTION\noptions   Object   The options to set\n\n\ntaggd.addTag(tag)#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\nPARAM   TYPE        DESCRIPTION\ntag     Taggd.Tag   The tag to add\n\n\ntaggd.getTag(index)#\n\nKind: instance method of Taggd\n\nReturns: Taggd.Tag - The tag to get\n\nPARAM   TYPE     DESCRIPTION\nindex   Number   The index of the desired tag\n\n\ntaggd.deleteTag(index)#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\nPARAM   TYPE     DESCRIPTION\nindex   Number   The index of the desired tag\n\n\ntaggd.setTags(tags)#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\nPARAM   TYPE     DESCRIPTION\ntags    Array.   An array of tags\n\n\ntaggd.addTags(tags)#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\nPARAM   TYPE     DESCRIPTION\ntags    Array.   An array of tags\n\n\ntaggd.getTags()#\n\nKind: instance method of Taggd\n\nReturns: Array. - All tags of this Taggd instance\n\n\ntaggd.deleteTags()#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\n\ntaggd.map(callback)#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\nPARAM      TYPE       DESCRIPTION\ncallback   function   The callback to execute for all tags\n\n\ntaggd.destroy()#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\n\ntaggd.enableEditorMode()#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance\n\n\ntaggd.disableEditorMode()#\n\nKind: instance method of Taggd\n\nReturns: Taggd - Current Taggd instance","frontmatter":{},"version":""},{"id":3,"title":"Taggd.Tag","routePath":"/taggd-manager/guide/api/taggd.tag","lang":"en","toc":[{"text":"new Tag(position, text, [buttonAttributes], [popupAttributes])","id":"new-tagposition-text-buttonattributes-popupattributes","depth":3,"charIndex":3},{"text":"tag.on(eventName, handler)","id":"tagoneventname-handler","depth":3,"charIndex":424},{"text":"tag.off(eventName, handler)","id":"tagoffeventname-handler","depth":3,"charIndex":666},{"text":"tag.once(eventName, handler)","id":"tagonceeventname-handler","depth":3,"charIndex":929},{"text":"tag.isHidden()","id":"tagishidden","depth":3,"charIndex":1173},{"text":"tag.show()","id":"tagshow","depth":3,"charIndex":1278},{"text":"tag.hide()","id":"taghide","depth":3,"charIndex":1371},{"text":"tag.setText(text)","id":"tagsettexttext","depth":3,"charIndex":1464},{"text":"tag.setPosition(x, y)","id":"tagsetpositionx-y","depth":3,"charIndex":1651},{"text":"tag.setButtonAttributes(atttributes)","id":"tagsetbuttonattributesatttributes","depth":3,"charIndex":1865},{"text":"tag.setPopupAttributes(atttributes)","id":"tagsetpopupattributesatttributes","depth":3,"charIndex":2072},{"text":"tag.enableEditorMode()","id":"tagenableeditormode","depth":3,"charIndex":2278},{"text":"tag.disableEditorMode()","id":"tagdisableeditormode","depth":3,"charIndex":2383},{"text":"tag.toJSON()","id":"tagtojson","depth":3,"charIndex":2489},{"text":"Tag.setElementAttributes(element, [attributes])","id":"tagsetelementattributeselement-attributes","depth":3,"charIndex":2572},{"text":"Tag.getPositionStyle(x, y)","id":"taggetpositionstylex-y","depth":3,"charIndex":2881},{"text":"Tag.createFromObject(object)","id":"tagcreatefromobjectobject","depth":3,"charIndex":3078}],"domain":"","content":"#\n\n\nnew Tag(position, text, [buttonAttributes], [popupAttributes])#\n\nPARAM                TYPE                DEFAULT   DESCRIPTION\nposition             Object                        The tagâ€™s coordinates\ntext                 String | function             The tagâ€™s content\n[buttonAttributes]   Object              {}        The buttonâ€™s attributes\n[popupAttributes]    Object              {}        The popupâ€™s attributes\n\n\ntag.on(eventName, handler)#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\nPARAM       TYPE       DESCRIPTION\neventName   String     The event to subscribe to.\nhandler     function   The handler to execute.\n\n\ntag.off(eventName, handler)#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\nPARAM       TYPE       DESCRIPTION\neventName   String     The event to unsubscribe from.\nhandler     function   The handler that was used to subscribe.\n\n\ntag.once(eventName, handler)#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\nPARAM       TYPE       DESCRIPTION\neventName   String     The event to subscribe to.\nhandler     function   The handler to execute.\n\n\ntag.isHidden()#\n\nKind: instance method of Tag\n\nReturns: Boolean - A boolean indicating the tagâ€™s state\n\n\ntag.show()#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\n\ntag.hide()#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\n\ntag.setText(text)#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\nPARAM   TYPE                DESCRIPTION\ntext    String | function   The tagâ€™s content\n\n\ntag.setPosition(x, y)#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\nPARAM   TYPE     DESCRIPTION\nx       Number   The tagâ€™s x-coordinate\ny       Number   The tagâ€™s y-coordinate\n\n\ntag.setButtonAttributes(atttributes)#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\nPARAM         TYPE     DESCRIPTION\natttributes   Object   = {} - The attributes to set\n\n\ntag.setPopupAttributes(atttributes)#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\nPARAM         TYPE     DESCRIPTION\natttributes   Object   = {} - The attributes to set\n\n\ntag.enableEditorMode()#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\n\ntag.disableEditorMode()#\n\nKind: instance method of Tag\n\nReturns: Taggd.Tag - Current Taggd.Tag instance\n\n\ntag.toJSON()#\n\nKind: instance method of Tag\n\nReturns: Object - A object for JSON\n\n\nTag.setElementAttributes(element, [attributes])#\n\nKind: static method of Tag\n\nReturns: DomNode - The original element\n\nPARAM          TYPE      DEFAULT   DESCRIPTION\nelement        DomNode             The element the attributes should be set to\n[attributes]   Object    {}        A map of attributes to set\n\n\nTag.getPositionStyle(x, y)#\n\nKind: static method of Tag\n\nReturns: Object - The style\n\nPARAM   TYPE     DESCRIPTION\nx       Number   The tagâ€™s x-coordinate\ny       Number   The tagâ€™s y-coordinate\n\n\nTag.createFromObject(object)#\n\nKind: static method of Tag\n\nReturns: Tag - The created Tag instance\n\nPARAM    TYPE     DESCRIPTION\nobject   Object   The object containing all information","frontmatter":{},"version":""},{"id":4,"title":"Intro","routePath":"/taggd-manager/guide/introduction","lang":"en","toc":[{"text":"Installation","id":"installation","depth":2,"charIndex":304},{"text":"Usage","id":"usage","depth":2,"charIndex":386}],"domain":"","content":"#\n\ntaggd-manager Is an image tag management tool that supports zooming, moving, and\nflexible customization.\n\nThe original idea of it comes from timseverien/taggd, The original author did\nnot maintain this project. So a new project extension has been created, adding\nzoom, move and more event callbacks.\n\n\nInstallation#\n\n * Download the latest release\n * npm: npm install taggd-manager\n\n\nUsage#\n\nYou need to bring in the css and js files, both of which are in the dist\ndirectory.\n\nThe style sheet has only the required dependency style, if you want to add a\ntheme, re-override it.\n\n\n\n\n\n\n\nIf you use a module import.\n\n\n\n\nFinally, you can initialize taggd.\n\nconst image = document.getElementById('my-image');\nconst options = {};\nconst tags = [];\n\nconst taggd = new Taggd(image, options, tags);\n","frontmatter":{},"version":""}]